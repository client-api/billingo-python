# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.14
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from pydantic import StrictInt, StrictStr, conint

from typing import Optional

from clientapi_billingo.models.category import Category
from clientapi_billingo.models.currency import Currency
from clientapi_billingo.models.date_type import DateType
from clientapi_billingo.models.payment_method import PaymentMethod
from clientapi_billingo.models.payment_status_spending import PaymentStatusSpending
from clientapi_billingo.models.source import Source
from clientapi_billingo.models.spending import Spending
from clientapi_billingo.models.spending_list import SpendingList
from clientapi_billingo.models.spending_save import SpendingSave

from clientapi_billingo.api_client import ApiClient
from clientapi_billingo.api_response import ApiResponse
from clientapi_billingo.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SpendingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def spending_delete(self, id : StrictInt, **kwargs) -> None:  # noqa: E501
        """Deletes a spending.  # noqa: E501

        Deletes the spending identified by the ID given in path.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.spending_delete(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the spending_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.spending_delete_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def spending_delete_with_http_info(self, id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Deletes a spending.  # noqa: E501

        Deletes the spending identified by the ID given in path.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.spending_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method spending_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/spendings/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def spending_list(self, q : Optional[StrictStr] = None, page : Optional[StrictInt] = None, per_page : Optional[conint(strict=True, le=100, ge=1)] = None, spending_date : Optional[DateType] = None, start_date : Optional[StrictStr] = None, end_date : Optional[StrictStr] = None, payment_status : Optional[PaymentStatusSpending] = None, spending_type : Optional[Source] = None, categories : Optional[Category] = None, currencies : Optional[Currency] = None, payment_methods : Optional[PaymentMethod] = None, **kwargs) -> SpendingList:  # noqa: E501
        """Lists all spending  # noqa: E501

        Returns a list of your spending items, ordered by the due date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.spending_list(q, page, per_page, spending_date, start_date, end_date, payment_status, spending_type, categories, currencies, payment_methods, async_req=True)
        >>> result = thread.get()

        :param q:
        :type q: str
        :param page:
        :type page: int
        :param per_page:
        :type per_page: int
        :param spending_date:
        :type spending_date: DateType
        :param start_date:
        :type start_date: str
        :param end_date:
        :type end_date: str
        :param payment_status:
        :type payment_status: PaymentStatusSpending
        :param spending_type:
        :type spending_type: Source
        :param categories:
        :type categories: Category
        :param currencies:
        :type currencies: Currency
        :param payment_methods:
        :type payment_methods: PaymentMethod
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SpendingList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the spending_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.spending_list_with_http_info(q, page, per_page, spending_date, start_date, end_date, payment_status, spending_type, categories, currencies, payment_methods, **kwargs)  # noqa: E501

    @validate_arguments
    def spending_list_with_http_info(self, q : Optional[StrictStr] = None, page : Optional[StrictInt] = None, per_page : Optional[conint(strict=True, le=100, ge=1)] = None, spending_date : Optional[DateType] = None, start_date : Optional[StrictStr] = None, end_date : Optional[StrictStr] = None, payment_status : Optional[PaymentStatusSpending] = None, spending_type : Optional[Source] = None, categories : Optional[Category] = None, currencies : Optional[Currency] = None, payment_methods : Optional[PaymentMethod] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Lists all spending  # noqa: E501

        Returns a list of your spending items, ordered by the due date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.spending_list_with_http_info(q, page, per_page, spending_date, start_date, end_date, payment_status, spending_type, categories, currencies, payment_methods, async_req=True)
        >>> result = thread.get()

        :param q:
        :type q: str
        :param page:
        :type page: int
        :param per_page:
        :type per_page: int
        :param spending_date:
        :type spending_date: DateType
        :param start_date:
        :type start_date: str
        :param end_date:
        :type end_date: str
        :param payment_status:
        :type payment_status: PaymentStatusSpending
        :param spending_type:
        :type spending_type: Source
        :param categories:
        :type categories: Category
        :param currencies:
        :type currencies: Currency
        :param payment_methods:
        :type payment_methods: PaymentMethod
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SpendingList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'q',
            'page',
            'per_page',
            'spending_date',
            'start_date',
            'end_date',
            'payment_status',
            'spending_type',
            'categories',
            'currencies',
            'payment_methods'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method spending_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('q') is not None:  # noqa: E501
            _query_params.append(('q', _params['q']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('per_page') is not None:  # noqa: E501
            _query_params.append(('per_page', _params['per_page']))

        if _params.get('spending_date') is not None:  # noqa: E501
            _query_params.append(('spending_date', _params['spending_date'].value))

        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('start_date', _params['start_date']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('end_date', _params['end_date']))

        if _params.get('payment_status') is not None:  # noqa: E501
            _query_params.append(('payment_status', _params['payment_status'].value))

        if _params.get('spending_type') is not None:  # noqa: E501
            _query_params.append(('spending_type', _params['spending_type'].value))

        if _params.get('categories') is not None:  # noqa: E501
            _query_params.append(('categories', _params['categories'].value))

        if _params.get('currencies') is not None:  # noqa: E501
            _query_params.append(('currencies', _params['currencies'].value))

        if _params.get('payment_methods') is not None:  # noqa: E501
            _query_params.append(('payment_methods', _params['payment_methods'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "SpendingList",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/spendings', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def spending_save(self, spending_save : Optional[SpendingSave] = None, **kwargs) -> Spending:  # noqa: E501
        """Creates a new spending.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.spending_save(spending_save, async_req=True)
        >>> result = thread.get()

        :param spending_save:
        :type spending_save: SpendingSave
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Spending
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the spending_save_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.spending_save_with_http_info(spending_save, **kwargs)  # noqa: E501

    @validate_arguments
    def spending_save_with_http_info(self, spending_save : Optional[SpendingSave] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Creates a new spending.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.spending_save_with_http_info(spending_save, async_req=True)
        >>> result = thread.get()

        :param spending_save:
        :type spending_save: SpendingSave
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Spending, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'spending_save'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method spending_save" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['spending_save'] is not None:
            _body_params = _params['spending_save']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '201': "Spending",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '403': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/spendings', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def spending_show(self, id : StrictInt, **kwargs) -> Spending:  # noqa: E501
        """Retrieves one specific spending.  # noqa: E501

        Retrives the spending identified by the given ID in path.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.spending_show(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Spending
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the spending_show_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.spending_show_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def spending_show_with_http_info(self, id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieves one specific spending.  # noqa: E501

        Retrives the spending identified by the given ID in path.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.spending_show_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Spending, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method spending_show" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "Spending",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/spendings/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def spending_update(self, id : StrictInt, spending_save : Optional[SpendingSave] = None, **kwargs) -> Spending:  # noqa: E501
        """Updates a spending item.  # noqa: E501

        Updates the spending item identified by the ID given in path.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.spending_update(id, spending_save, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param spending_save:
        :type spending_save: SpendingSave
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Spending
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the spending_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.spending_update_with_http_info(id, spending_save, **kwargs)  # noqa: E501

    @validate_arguments
    def spending_update_with_http_info(self, id : StrictInt, spending_save : Optional[SpendingSave] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Updates a spending item.  # noqa: E501

        Updates the spending item identified by the ID given in path.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.spending_update_with_http_info(id, spending_save, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param spending_save:
        :type spending_save: SpendingSave
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Spending, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'spending_save'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method spending_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['spending_save'] is not None:
            _body_params = _params['spending_save']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "Spending",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '403': "ClientErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/spendings/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
