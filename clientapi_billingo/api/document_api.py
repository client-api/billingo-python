# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.14
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import date

from pydantic import Field, StrictFloat, StrictInt, StrictStr, conint, conlist

from typing import List, Optional, Union

from clientapi_billingo.models.document import Document
from clientapi_billingo.models.document_cancellation import DocumentCancellation
from clientapi_billingo.models.document_insert import DocumentInsert
from clientapi_billingo.models.document_list import DocumentList
from clientapi_billingo.models.document_public_url import DocumentPublicUrl
from clientapi_billingo.models.document_type import DocumentType
from clientapi_billingo.models.invoice_settings import InvoiceSettings
from clientapi_billingo.models.modification_document_insert import ModificationDocumentInsert
from clientapi_billingo.models.online_szamla_status import OnlineSzamlaStatus
from clientapi_billingo.models.payment_history import PaymentHistory
from clientapi_billingo.models.payment_method import PaymentMethod
from clientapi_billingo.models.payment_status import PaymentStatus
from clientapi_billingo.models.receipt_insert import ReceiptInsert
from clientapi_billingo.models.send_document import SendDocument

from clientapi_billingo.api_client import ApiClient
from clientapi_billingo.api_response import ApiResponse
from clientapi_billingo.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DocumentApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def archive_document(self, id : StrictInt, **kwargs) -> None:  # noqa: E501
        """Archive a proforma document.  # noqa: E501

        Archive an existing proforma document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.archive_document(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the archive_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.archive_document_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def archive_document_with_http_info(self, id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Archive a proforma document.  # noqa: E501

        Archive an existing proforma document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.archive_document_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method archive_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/documents/{id}/archive', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def cancel_document(self, id : StrictInt, document_cancellation : Annotated[Optional[DocumentCancellation], Field(description="Comment and notifiable email addresses - comma separated for multiple email addresses")] = None, **kwargs) -> Document:  # noqa: E501
        """Cancel a document  # noqa: E501

        Cancel a document. Returns a cancellation document object if the cancellation is succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_document(id, document_cancellation, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param document_cancellation: Comment and notifiable email addresses - comma separated for multiple email addresses
        :type document_cancellation: DocumentCancellation
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Document
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the cancel_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.cancel_document_with_http_info(id, document_cancellation, **kwargs)  # noqa: E501

    @validate_arguments
    def cancel_document_with_http_info(self, id : StrictInt, document_cancellation : Annotated[Optional[DocumentCancellation], Field(description="Comment and notifiable email addresses - comma separated for multiple email addresses")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Cancel a document  # noqa: E501

        Cancel a document. Returns a cancellation document object if the cancellation is succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_document_with_http_info(id, document_cancellation, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param document_cancellation: Comment and notifiable email addresses - comma separated for multiple email addresses
        :type document_cancellation: DocumentCancellation
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Document, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'document_cancellation'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['document_cancellation'] is not None:
            _body_params = _params['document_cancellation']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "Document",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '403': "ClientErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/{id}/cancel', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_document(self, document_insert : Annotated[DocumentInsert, Field(..., description="DocumentInsert object that you would like to store.")], **kwargs) -> Document:  # noqa: E501
        """Create a document  # noqa: E501

        Create a new document. Returns a document object if the create is succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_document(document_insert, async_req=True)
        >>> result = thread.get()

        :param document_insert: DocumentInsert object that you would like to store. (required)
        :type document_insert: DocumentInsert
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Document
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_document_with_http_info(document_insert, **kwargs)  # noqa: E501

    @validate_arguments
    def create_document_with_http_info(self, document_insert : Annotated[DocumentInsert, Field(..., description="DocumentInsert object that you would like to store.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a document  # noqa: E501

        Create a new document. Returns a document object if the create is succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_document_with_http_info(document_insert, async_req=True)
        >>> result = thread.get()

        :param document_insert: DocumentInsert object that you would like to store. (required)
        :type document_insert: DocumentInsert
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Document, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'document_insert'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['document_insert'] is not None:
            _body_params = _params['document_insert']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '201': "Document",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '403': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_document_from_draft(self, id : StrictInt, document_insert : Annotated[DocumentInsert, Field(..., description="DocumentInsert object that you would like to store.")], **kwargs) -> Document:  # noqa: E501
        """Converts a draft to an invoice.  # noqa: E501

        Converts a draft to an invoice. Returns the invoice object if the convert is succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_document_from_draft(id, document_insert, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param document_insert: DocumentInsert object that you would like to store. (required)
        :type document_insert: DocumentInsert
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Document
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_document_from_draft_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_document_from_draft_with_http_info(id, document_insert, **kwargs)  # noqa: E501

    @validate_arguments
    def create_document_from_draft_with_http_info(self, id : StrictInt, document_insert : Annotated[DocumentInsert, Field(..., description="DocumentInsert object that you would like to store.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Converts a draft to an invoice.  # noqa: E501

        Converts a draft to an invoice. Returns the invoice object if the convert is succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_document_from_draft_with_http_info(id, document_insert, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param document_insert: DocumentInsert object that you would like to store. (required)
        :type document_insert: DocumentInsert
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Document, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'document_insert'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_document_from_draft" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['document_insert'] is not None:
            _body_params = _params['document_insert']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "Document",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '403': "ClientErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_document_from_proforma(self, id : StrictInt, invoice_settings : Annotated[Optional[InvoiceSettings], Field(description="InvoiceSettings object.")] = None, **kwargs) -> Document:  # noqa: E501
        """Create a document from proforma.  # noqa: E501

        Create a new document from proforma. Returns a document object if the create is succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_document_from_proforma(id, invoice_settings, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param invoice_settings: InvoiceSettings object.
        :type invoice_settings: InvoiceSettings
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Document
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_document_from_proforma_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_document_from_proforma_with_http_info(id, invoice_settings, **kwargs)  # noqa: E501

    @validate_arguments
    def create_document_from_proforma_with_http_info(self, id : StrictInt, invoice_settings : Annotated[Optional[InvoiceSettings], Field(description="InvoiceSettings object.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a document from proforma.  # noqa: E501

        Create a new document from proforma. Returns a document object if the create is succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_document_from_proforma_with_http_info(id, invoice_settings, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param invoice_settings: InvoiceSettings object.
        :type invoice_settings: InvoiceSettings
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Document, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'invoice_settings'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_document_from_proforma" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['invoice_settings'] is not None:
            _body_params = _params['invoice_settings']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '201': "Document",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '403': "ClientErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/{id}/create-from-proforma', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_modification_document(self, id : StrictInt, modification_document_insert : Annotated[ModificationDocumentInsert, Field(..., description="ModificationDocumentInsert object that you would like to store.")], **kwargs) -> Document:  # noqa: E501
        """Create a modification document.  # noqa: E501

        Create a modification document for the given document. Returns a new document object if the create is successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_modification_document(id, modification_document_insert, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param modification_document_insert: ModificationDocumentInsert object that you would like to store. (required)
        :type modification_document_insert: ModificationDocumentInsert
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Document
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_modification_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_modification_document_with_http_info(id, modification_document_insert, **kwargs)  # noqa: E501

    @validate_arguments
    def create_modification_document_with_http_info(self, id : StrictInt, modification_document_insert : Annotated[ModificationDocumentInsert, Field(..., description="ModificationDocumentInsert object that you would like to store.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a modification document.  # noqa: E501

        Create a modification document for the given document. Returns a new document object if the create is successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_modification_document_with_http_info(id, modification_document_insert, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param modification_document_insert: ModificationDocumentInsert object that you would like to store. (required)
        :type modification_document_insert: ModificationDocumentInsert
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Document, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'modification_document_insert'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_modification_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['modification_document_insert'] is not None:
            _body_params = _params['modification_document_insert']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '201': "Document",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '403': "ClientErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/{id}/create-modification-document', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_receipt(self, receipt_insert : Annotated[ReceiptInsert, Field(..., description="ReceiptInsert object that you would like to store.")], **kwargs) -> Document:  # noqa: E501
        """Create a receipt  # noqa: E501

        Create a new receipt. Returns a document object if the create is succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_receipt(receipt_insert, async_req=True)
        >>> result = thread.get()

        :param receipt_insert: ReceiptInsert object that you would like to store. (required)
        :type receipt_insert: ReceiptInsert
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Document
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_receipt_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_receipt_with_http_info(receipt_insert, **kwargs)  # noqa: E501

    @validate_arguments
    def create_receipt_with_http_info(self, receipt_insert : Annotated[ReceiptInsert, Field(..., description="ReceiptInsert object that you would like to store.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a receipt  # noqa: E501

        Create a new receipt. Returns a document object if the create is succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_receipt_with_http_info(receipt_insert, async_req=True)
        >>> result = thread.get()

        :param receipt_insert: ReceiptInsert object that you would like to store. (required)
        :type receipt_insert: ReceiptInsert
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Document, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'receipt_insert'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_receipt" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['receipt_insert'] is not None:
            _body_params = _params['receipt_insert']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '201': "Document",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '403': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/receipt', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_receipt_from_draft(self, id : StrictInt, receipt_insert : Annotated[ReceiptInsert, Field(..., description="ReceiptInsert object that you would like to store.")], **kwargs) -> Document:  # noqa: E501
        """Converts a draft to a receipt.  # noqa: E501

        Converts a draft to a receipt. Returns the receipt object if the convert is succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_receipt_from_draft(id, receipt_insert, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param receipt_insert: ReceiptInsert object that you would like to store. (required)
        :type receipt_insert: ReceiptInsert
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Document
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_receipt_from_draft_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_receipt_from_draft_with_http_info(id, receipt_insert, **kwargs)  # noqa: E501

    @validate_arguments
    def create_receipt_from_draft_with_http_info(self, id : StrictInt, receipt_insert : Annotated[ReceiptInsert, Field(..., description="ReceiptInsert object that you would like to store.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Converts a draft to a receipt.  # noqa: E501

        Converts a draft to a receipt. Returns the receipt object if the convert is succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_receipt_from_draft_with_http_info(id, receipt_insert, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param receipt_insert: ReceiptInsert object that you would like to store. (required)
        :type receipt_insert: ReceiptInsert
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Document, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'receipt_insert'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_receipt_from_draft" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['receipt_insert'] is not None:
            _body_params = _params['receipt_insert']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "Document",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '403': "ClientErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/receipt/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_document(self, id : StrictInt, **kwargs) -> None:  # noqa: E501
        """Delete a draft.  # noqa: E501

        Delete an existing draft.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_document(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_document_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_document_with_http_info(self, id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a draft.  # noqa: E501

        Delete an existing draft.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_document_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/documents/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_payment(self, id : StrictInt, **kwargs) -> List[PaymentHistory]:  # noqa: E501
        """Delete all payment history on document  # noqa: E501

        Delete all exist payment history on document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_payment(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[PaymentHistory]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_payment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_payment_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_payment_with_http_info(self, id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete all payment history on document  # noqa: E501

        Delete all exist payment history on document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_payment_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[PaymentHistory], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_payment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "List[PaymentHistory]",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '403': "ClientErrorResponse",
            '404': "ClientErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/{id}/payments', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def document_copy(self, id : StrictInt, **kwargs) -> Document:  # noqa: E501
        """Copy a document  # noqa: E501

        Copy a document. Returns the new document if the copy was succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_copy(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Document
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the document_copy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.document_copy_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def document_copy_with_http_info(self, id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Copy a document  # noqa: E501

        Copy a document. Returns the new document if the copy was succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_copy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Document, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_copy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "Document",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '403': "ClientErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/{id}/copy', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def download_document(self, id : StrictInt, **kwargs) -> bytearray:  # noqa: E501
        """Download a document in PDF format.  # noqa: E501

        Download a document. Returns a document in PDF format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_document(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the download_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.download_document_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def download_document_with_http_info(self, id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Download a document in PDF format.  # noqa: E501

        Download a document. Returns a document in PDF format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_document_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '202': "ClientError",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/{id}/download', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_document(self, id : StrictInt, **kwargs) -> Document:  # noqa: E501
        """Retrieve a document  # noqa: E501

        Retrieves the details of an existing document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Document
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_document_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_document_with_http_info(self, id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve a document  # noqa: E501

        Retrieves the details of an existing document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Document, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "Document",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_document_by_vendor_id(self, vendor_id : StrictStr, **kwargs) -> Document:  # noqa: E501
        """Retrieve a document by vendor id  # noqa: E501

        Retrieves the details of an existing document by vendor id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document_by_vendor_id(vendor_id, async_req=True)
        >>> result = thread.get()

        :param vendor_id: (required)
        :type vendor_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Document
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_document_by_vendor_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_document_by_vendor_id_with_http_info(vendor_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_document_by_vendor_id_with_http_info(self, vendor_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve a document by vendor id  # noqa: E501

        Retrieves the details of an existing document by vendor id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document_by_vendor_id_with_http_info(vendor_id, async_req=True)
        >>> result = thread.get()

        :param vendor_id: (required)
        :type vendor_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Document, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vendor_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document_by_vendor_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['vendor_id']:
            _path_params['vendor_id'] = _params['vendor_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "Document",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/vendor/{vendor_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_online_szamla_status(self, id : StrictInt, **kwargs) -> OnlineSzamlaStatus:  # noqa: E501
        """Retrieve a document Online Számla status  # noqa: E501

        Retrieves the details of an existing document status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_online_szamla_status(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: OnlineSzamlaStatus
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_online_szamla_status_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_online_szamla_status_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_online_szamla_status_with_http_info(self, id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve a document Online Számla status  # noqa: E501

        Retrieves the details of an existing document status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_online_szamla_status_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(OnlineSzamlaStatus, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_online_szamla_status" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "OnlineSzamlaStatus",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/{id}/online-szamla', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_payment(self, id : StrictInt, **kwargs) -> List[PaymentHistory]:  # noqa: E501
        """Retrieve a payment histroy  # noqa: E501

        Retrieves the details of payment history an existing document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_payment(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[PaymentHistory]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_payment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_payment_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_payment_with_http_info(self, id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve a payment histroy  # noqa: E501

        Retrieves the details of payment history an existing document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_payment_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[PaymentHistory], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "List[PaymentHistory]",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/{id}/payments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_public_url(self, id : StrictInt, **kwargs) -> DocumentPublicUrl:  # noqa: E501
        """Retrieve a document download public url.  # noqa: E501

        Retrieves public url to download an existing document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_public_url(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DocumentPublicUrl
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_public_url_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_public_url_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_public_url_with_http_info(self, id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve a document download public url.  # noqa: E501

        Retrieves public url to download an existing document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_public_url_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DocumentPublicUrl, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_url" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "DocumentPublicUrl",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/{id}/public-url', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_document(self, page : Optional[StrictInt] = None, per_page : Optional[conint(strict=True, le=100, ge=1)] = None, block_id : Annotated[Optional[StrictInt], Field(description="Filter documents by the identifier of your DocumentBlock.")] = None, partner_id : Annotated[Optional[StrictInt], Field(description="Filter documents by the identifier of your Partner.")] = None, payment_method : Annotated[Optional[PaymentMethod], Field(description="Filter documents by PaymentMethod value.")] = None, payment_status : Annotated[Optional[PaymentStatus], Field(description="Filter documents by PaymentStatus value.")] = None, start_date : Annotated[Optional[date], Field(description="Filter documents by their invoice date.")] = None, end_date : Annotated[Optional[date], Field(description="Filter documents by their invoice date.")] = None, start_number : Annotated[Optional[StrictInt], Field(description="Starting number of the document, should not contain year or any other formatting. Required if `start_year` given")] = None, end_number : Annotated[Optional[StrictInt], Field(description="Ending number of the document, should not contain year or any other formatting. Required if `end_year` given")] = None, start_year : Annotated[Optional[StrictInt], Field(description="Year for `start_number` parameter. Required if `start_number` given.")] = None, end_year : Annotated[Optional[StrictInt], Field(description="Year for `end_number` parameter. Required if `end_number` given.")] = None, type : Annotated[Optional[DocumentType], Field(description="Filter documents by type")] = None, query : Annotated[Optional[StrictStr], Field(description="Filter documents by the given text")] = None, paid_start_date : Annotated[Optional[date], Field(description="Filter documents by their payment date.")] = None, paid_end_date : Annotated[Optional[date], Field(description="Filter documents by their payment date.")] = None, fulfillment_start_date : Annotated[Optional[date], Field(description="Filter documents by their fulfillment date.")] = None, fulfillment_end_date : Annotated[Optional[date], Field(description="Filter documents by their fulfillment date.")] = None, last_modified_date : Annotated[Optional[StrictStr], Field(description="Filter documents by their last modified date.")] = None, **kwargs) -> DocumentList:  # noqa: E501
        """List all documents  # noqa: E501

        Returns a list of your documents. The documents are returned sorted by creation date, with the most recent documents appearing first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_document(page, per_page, block_id, partner_id, payment_method, payment_status, start_date, end_date, start_number, end_number, start_year, end_year, type, query, paid_start_date, paid_end_date, fulfillment_start_date, fulfillment_end_date, last_modified_date, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: int
        :param per_page:
        :type per_page: int
        :param block_id: Filter documents by the identifier of your DocumentBlock.
        :type block_id: int
        :param partner_id: Filter documents by the identifier of your Partner.
        :type partner_id: int
        :param payment_method: Filter documents by PaymentMethod value.
        :type payment_method: PaymentMethod
        :param payment_status: Filter documents by PaymentStatus value.
        :type payment_status: PaymentStatus
        :param start_date: Filter documents by their invoice date.
        :type start_date: date
        :param end_date: Filter documents by their invoice date.
        :type end_date: date
        :param start_number: Starting number of the document, should not contain year or any other formatting. Required if `start_year` given
        :type start_number: int
        :param end_number: Ending number of the document, should not contain year or any other formatting. Required if `end_year` given
        :type end_number: int
        :param start_year: Year for `start_number` parameter. Required if `start_number` given.
        :type start_year: int
        :param end_year: Year for `end_number` parameter. Required if `end_number` given.
        :type end_year: int
        :param type: Filter documents by type
        :type type: DocumentType
        :param query: Filter documents by the given text
        :type query: str
        :param paid_start_date: Filter documents by their payment date.
        :type paid_start_date: date
        :param paid_end_date: Filter documents by their payment date.
        :type paid_end_date: date
        :param fulfillment_start_date: Filter documents by their fulfillment date.
        :type fulfillment_start_date: date
        :param fulfillment_end_date: Filter documents by their fulfillment date.
        :type fulfillment_end_date: date
        :param last_modified_date: Filter documents by their last modified date.
        :type last_modified_date: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DocumentList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_document_with_http_info(page, per_page, block_id, partner_id, payment_method, payment_status, start_date, end_date, start_number, end_number, start_year, end_year, type, query, paid_start_date, paid_end_date, fulfillment_start_date, fulfillment_end_date, last_modified_date, **kwargs)  # noqa: E501

    @validate_arguments
    def list_document_with_http_info(self, page : Optional[StrictInt] = None, per_page : Optional[conint(strict=True, le=100, ge=1)] = None, block_id : Annotated[Optional[StrictInt], Field(description="Filter documents by the identifier of your DocumentBlock.")] = None, partner_id : Annotated[Optional[StrictInt], Field(description="Filter documents by the identifier of your Partner.")] = None, payment_method : Annotated[Optional[PaymentMethod], Field(description="Filter documents by PaymentMethod value.")] = None, payment_status : Annotated[Optional[PaymentStatus], Field(description="Filter documents by PaymentStatus value.")] = None, start_date : Annotated[Optional[date], Field(description="Filter documents by their invoice date.")] = None, end_date : Annotated[Optional[date], Field(description="Filter documents by their invoice date.")] = None, start_number : Annotated[Optional[StrictInt], Field(description="Starting number of the document, should not contain year or any other formatting. Required if `start_year` given")] = None, end_number : Annotated[Optional[StrictInt], Field(description="Ending number of the document, should not contain year or any other formatting. Required if `end_year` given")] = None, start_year : Annotated[Optional[StrictInt], Field(description="Year for `start_number` parameter. Required if `start_number` given.")] = None, end_year : Annotated[Optional[StrictInt], Field(description="Year for `end_number` parameter. Required if `end_number` given.")] = None, type : Annotated[Optional[DocumentType], Field(description="Filter documents by type")] = None, query : Annotated[Optional[StrictStr], Field(description="Filter documents by the given text")] = None, paid_start_date : Annotated[Optional[date], Field(description="Filter documents by their payment date.")] = None, paid_end_date : Annotated[Optional[date], Field(description="Filter documents by their payment date.")] = None, fulfillment_start_date : Annotated[Optional[date], Field(description="Filter documents by their fulfillment date.")] = None, fulfillment_end_date : Annotated[Optional[date], Field(description="Filter documents by their fulfillment date.")] = None, last_modified_date : Annotated[Optional[StrictStr], Field(description="Filter documents by their last modified date.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List all documents  # noqa: E501

        Returns a list of your documents. The documents are returned sorted by creation date, with the most recent documents appearing first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_document_with_http_info(page, per_page, block_id, partner_id, payment_method, payment_status, start_date, end_date, start_number, end_number, start_year, end_year, type, query, paid_start_date, paid_end_date, fulfillment_start_date, fulfillment_end_date, last_modified_date, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: int
        :param per_page:
        :type per_page: int
        :param block_id: Filter documents by the identifier of your DocumentBlock.
        :type block_id: int
        :param partner_id: Filter documents by the identifier of your Partner.
        :type partner_id: int
        :param payment_method: Filter documents by PaymentMethod value.
        :type payment_method: PaymentMethod
        :param payment_status: Filter documents by PaymentStatus value.
        :type payment_status: PaymentStatus
        :param start_date: Filter documents by their invoice date.
        :type start_date: date
        :param end_date: Filter documents by their invoice date.
        :type end_date: date
        :param start_number: Starting number of the document, should not contain year or any other formatting. Required if `start_year` given
        :type start_number: int
        :param end_number: Ending number of the document, should not contain year or any other formatting. Required if `end_year` given
        :type end_number: int
        :param start_year: Year for `start_number` parameter. Required if `start_number` given.
        :type start_year: int
        :param end_year: Year for `end_number` parameter. Required if `end_number` given.
        :type end_year: int
        :param type: Filter documents by type
        :type type: DocumentType
        :param query: Filter documents by the given text
        :type query: str
        :param paid_start_date: Filter documents by their payment date.
        :type paid_start_date: date
        :param paid_end_date: Filter documents by their payment date.
        :type paid_end_date: date
        :param fulfillment_start_date: Filter documents by their fulfillment date.
        :type fulfillment_start_date: date
        :param fulfillment_end_date: Filter documents by their fulfillment date.
        :type fulfillment_end_date: date
        :param last_modified_date: Filter documents by their last modified date.
        :type last_modified_date: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DocumentList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'per_page',
            'block_id',
            'partner_id',
            'payment_method',
            'payment_status',
            'start_date',
            'end_date',
            'start_number',
            'end_number',
            'start_year',
            'end_year',
            'type',
            'query',
            'paid_start_date',
            'paid_end_date',
            'fulfillment_start_date',
            'fulfillment_end_date',
            'last_modified_date'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('per_page') is not None:  # noqa: E501
            _query_params.append(('per_page', _params['per_page']))

        if _params.get('block_id') is not None:  # noqa: E501
            _query_params.append(('block_id', _params['block_id']))

        if _params.get('partner_id') is not None:  # noqa: E501
            _query_params.append(('partner_id', _params['partner_id']))

        if _params.get('payment_method') is not None:  # noqa: E501
            _query_params.append(('payment_method', _params['payment_method'].value))

        if _params.get('payment_status') is not None:  # noqa: E501
            _query_params.append(('payment_status', _params['payment_status'].value))

        if _params.get('start_date') is not None:  # noqa: E501
            if isinstance(_params['start_date'], date):
                _query_params.append(('start_date', _params['start_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('start_date', _params['start_date']))

        if _params.get('end_date') is not None:  # noqa: E501
            if isinstance(_params['end_date'], date):
                _query_params.append(('end_date', _params['end_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('end_date', _params['end_date']))

        if _params.get('start_number') is not None:  # noqa: E501
            _query_params.append(('start_number', _params['start_number']))

        if _params.get('end_number') is not None:  # noqa: E501
            _query_params.append(('end_number', _params['end_number']))

        if _params.get('start_year') is not None:  # noqa: E501
            _query_params.append(('start_year', _params['start_year']))

        if _params.get('end_year') is not None:  # noqa: E501
            _query_params.append(('end_year', _params['end_year']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type'].value))

        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('paid_start_date') is not None:  # noqa: E501
            if isinstance(_params['paid_start_date'], date):
                _query_params.append(('paid_start_date', _params['paid_start_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('paid_start_date', _params['paid_start_date']))

        if _params.get('paid_end_date') is not None:  # noqa: E501
            if isinstance(_params['paid_end_date'], date):
                _query_params.append(('paid_end_date', _params['paid_end_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('paid_end_date', _params['paid_end_date']))

        if _params.get('fulfillment_start_date') is not None:  # noqa: E501
            if isinstance(_params['fulfillment_start_date'], date):
                _query_params.append(('fulfillment_start_date', _params['fulfillment_start_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('fulfillment_start_date', _params['fulfillment_start_date']))

        if _params.get('fulfillment_end_date') is not None:  # noqa: E501
            if isinstance(_params['fulfillment_end_date'], date):
                _query_params.append(('fulfillment_end_date', _params['fulfillment_end_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('fulfillment_end_date', _params['fulfillment_end_date']))

        if _params.get('last_modified_date') is not None:  # noqa: E501
            _query_params.append(('last_modified_date', _params['last_modified_date']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "DocumentList",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def pos_print(self, id : StrictInt, size : Annotated[Union[StrictFloat, StrictInt], Field(..., description="In which size the POS PDF should be rendered.")], **kwargs) -> bytearray:  # noqa: E501
        """Returns a printable POS PDF  # noqa: E501

        Returns a printable POS PDF file of a particular document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pos_print(id, size, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param size: In which size the POS PDF should be rendered. (required)
        :type size: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the pos_print_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.pos_print_with_http_info(id, size, **kwargs)  # noqa: E501

    @validate_arguments
    def pos_print_with_http_info(self, id : StrictInt, size : Annotated[Union[StrictFloat, StrictInt], Field(..., description="In which size the POS PDF should be rendered.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Returns a printable POS PDF  # noqa: E501

        Returns a printable POS PDF file of a particular document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pos_print_with_http_info(id, size, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param size: In which size the POS PDF should be rendered. (required)
        :type size: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pos_print" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/{id}/print/pos', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def send_document(self, id : StrictInt, send_document : Annotated[Optional[SendDocument], Field(description="List of email-s where you want to send the invoice.")] = None, **kwargs) -> SendDocument:  # noqa: E501
        """Send invoice to given email adresses.  # noqa: E501

        Returns a list of emails, where the invoice is sent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_document(id, send_document, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param send_document: List of email-s where you want to send the invoice.
        :type send_document: SendDocument
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SendDocument
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the send_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.send_document_with_http_info(id, send_document, **kwargs)  # noqa: E501

    @validate_arguments
    def send_document_with_http_info(self, id : StrictInt, send_document : Annotated[Optional[SendDocument], Field(description="List of email-s where you want to send the invoice.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Send invoice to given email adresses.  # noqa: E501

        Returns a list of emails, where the invoice is sent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_document_with_http_info(id, send_document, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param send_document: List of email-s where you want to send the invoice.
        :type send_document: SendDocument
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SendDocument, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'send_document'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_document" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['send_document'] is not None:
            _body_params = _params['send_document']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "SendDocument",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '403': "ClientErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/{id}/send', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_payment(self, id : StrictInt, payment_history : Annotated[conlist(PaymentHistory), Field(..., description="Payment history object that you would like to update.")], **kwargs) -> List[PaymentHistory]:  # noqa: E501
        """Update payment history  # noqa: E501

        Update payment history an existing document. Returns a payment history object if the update is succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_payment(id, payment_history, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param payment_history: Payment history object that you would like to update. (required)
        :type payment_history: List[PaymentHistory]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[PaymentHistory]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_payment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_payment_with_http_info(id, payment_history, **kwargs)  # noqa: E501

    @validate_arguments
    def update_payment_with_http_info(self, id : StrictInt, payment_history : Annotated[conlist(PaymentHistory), Field(..., description="Payment history object that you would like to update.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update payment history  # noqa: E501

        Update payment history an existing document. Returns a payment history object if the update is succeded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_payment_with_http_info(id, payment_history, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param payment_history: Payment history object that you would like to update. (required)
        :type payment_history: List[PaymentHistory]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[PaymentHistory], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'payment_history'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_payment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['payment_history'] is not None:
            _body_params = _params['payment_history']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "List[PaymentHistory]",
            '400': "ClientErrorResponse",
            '401': "ClientErrorResponse",
            '402': "SubscriptionErrorResponse",
            '403': "ClientErrorResponse",
            '404': "ClientErrorResponse",
            '422': "ValidationErrorResponse",
            '429': "TooManyRequestsResponse",
            '500': "ServerErrorResponse",
        }

        return self.api_client.call_api(
            '/documents/{id}/payments', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
