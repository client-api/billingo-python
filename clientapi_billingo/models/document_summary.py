# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.14
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, conlist
from clientapi_billingo.models.document_vat_rate_summary import DocumentVatRateSummary

class DocumentSummary(BaseModel):
    """
    DocumentSummary
    """
    net_amount: Optional[Union[StrictFloat, StrictInt]] = None
    net_amount_local: Optional[Union[StrictFloat, StrictInt]] = None
    gross_amount_local: Optional[Union[StrictFloat, StrictInt]] = None
    vat_amount: Optional[Union[StrictFloat, StrictInt]] = None
    vat_amount_local: Optional[Union[StrictFloat, StrictInt]] = None
    vat_rate_summary: Optional[conlist(DocumentVatRateSummary)] = None
    __properties = ["net_amount", "net_amount_local", "gross_amount_local", "vat_amount", "vat_amount_local", "vat_rate_summary"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DocumentSummary:
        """Create an instance of DocumentSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in vat_rate_summary (list)
        _items = []
        if self.vat_rate_summary:
            for _item in self.vat_rate_summary:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vat_rate_summary'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DocumentSummary:
        """Create an instance of DocumentSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DocumentSummary.parse_obj(obj)

        _obj = DocumentSummary.parse_obj({
            "net_amount": obj.get("net_amount"),
            "net_amount_local": obj.get("net_amount_local"),
            "gross_amount_local": obj.get("gross_amount_local"),
            "vat_amount": obj.get("vat_amount"),
            "vat_amount_local": obj.get("vat_amount_local"),
            "vat_rate_summary": [DocumentVatRateSummary.from_dict(_item) for _item in obj.get("vat_rate_summary")] if obj.get("vat_rate_summary") is not None else None
        })
        return _obj


