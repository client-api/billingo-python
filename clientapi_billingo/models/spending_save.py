# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.14
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from clientapi_billingo.models.category import Category
from clientapi_billingo.models.currency import Currency
from clientapi_billingo.models.spending_payment_method import SpendingPaymentMethod

class SpendingSave(BaseModel):
    """
    SpendingSave
    """
    currency: Currency = Field(...)
    conversion_rate: Optional[Union[StrictFloat, StrictInt]] = None
    total_gross: Union[StrictFloat, StrictInt] = Field(...)
    total_gross_huf: Union[StrictFloat, StrictInt] = Field(...)
    total_vat_amount: Union[StrictFloat, StrictInt] = Field(...)
    total_vat_amount_huf: Union[StrictFloat, StrictInt] = Field(...)
    fulfillment_date: date = Field(...)
    paid_at: Optional[date] = None
    category: Category = Field(...)
    comment: Optional[StrictStr] = None
    invoice_number: Optional[StrictStr] = None
    invoice_date: Optional[date] = None
    due_date: Optional[date] = None
    payment_method: SpendingPaymentMethod = Field(...)
    partner_id: Optional[StrictInt] = None
    __properties = ["currency", "conversion_rate", "total_gross", "total_gross_huf", "total_vat_amount", "total_vat_amount_huf", "fulfillment_date", "paid_at", "category", "comment", "invoice_number", "invoice_date", "due_date", "payment_method", "partner_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SpendingSave:
        """Create an instance of SpendingSave from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SpendingSave:
        """Create an instance of SpendingSave from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SpendingSave.parse_obj(obj)

        _obj = SpendingSave.parse_obj({
            "currency": obj.get("currency"),
            "conversion_rate": obj.get("conversion_rate"),
            "total_gross": obj.get("total_gross"),
            "total_gross_huf": obj.get("total_gross_huf"),
            "total_vat_amount": obj.get("total_vat_amount"),
            "total_vat_amount_huf": obj.get("total_vat_amount_huf"),
            "fulfillment_date": obj.get("fulfillment_date"),
            "paid_at": obj.get("paid_at"),
            "category": obj.get("category"),
            "comment": obj.get("comment"),
            "invoice_number": obj.get("invoice_number"),
            "invoice_date": obj.get("invoice_date"),
            "due_date": obj.get("due_date"),
            "payment_method": obj.get("payment_method"),
            "partner_id": obj.get("partner_id")
        })
        return _obj


