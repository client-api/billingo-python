# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.14
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from clientapi_billingo.models.payment_method import PaymentMethod

class PaymentHistory(BaseModel):
    """
    PaymentHistory
    """
    var_date: date = Field(..., alias="date")
    price: Union[StrictFloat, StrictInt] = Field(...)
    payment_method: PaymentMethod = Field(...)
    voucher_number: Optional[StrictStr] = None
    conversion_rate: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["date", "price", "payment_method", "voucher_number", "conversion_rate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentHistory:
        """Create an instance of PaymentHistory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if voucher_number (nullable) is None
        # and __fields_set__ contains the field
        if self.voucher_number is None and "voucher_number" in self.__fields_set__:
            _dict['voucher_number'] = None

        # set to None if conversion_rate (nullable) is None
        # and __fields_set__ contains the field
        if self.conversion_rate is None and "conversion_rate" in self.__fields_set__:
            _dict['conversion_rate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentHistory:
        """Create an instance of PaymentHistory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentHistory.parse_obj(obj)

        _obj = PaymentHistory.parse_obj({
            "var_date": obj.get("date"),
            "price": obj.get("price"),
            "payment_method": obj.get("payment_method"),
            "voucher_number": obj.get("voucher_number"),
            "conversion_rate": obj.get("conversion_rate")
        })
        return _obj


