# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.14
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, conlist
from clientapi_billingo.models.document_block import DocumentBlock

class DocumentBlockList(BaseModel):
    """
    A object with a data property that contains an array of up to limit document blocks. Each entry in the array is a separate document block object. If no more document block are available, the resulting array will be empty.  # noqa: E501
    """
    data: Optional[conlist(DocumentBlock)] = None
    total: Optional[StrictInt] = None
    per_page: Optional[StrictInt] = None
    current_page: Optional[StrictInt] = None
    last_page: Optional[StrictInt] = None
    prev_page_url: Optional[StrictStr] = None
    next_page_url: Optional[StrictStr] = None
    __properties = ["data", "total", "per_page", "current_page", "last_page", "prev_page_url", "next_page_url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DocumentBlockList:
        """Create an instance of DocumentBlockList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item in self.data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DocumentBlockList:
        """Create an instance of DocumentBlockList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DocumentBlockList.parse_obj(obj)

        _obj = DocumentBlockList.parse_obj({
            "data": [DocumentBlock.from_dict(_item) for _item in obj.get("data")] if obj.get("data") is not None else None,
            "total": obj.get("total"),
            "per_page": obj.get("per_page"),
            "current_page": obj.get("current_page"),
            "last_page": obj.get("last_page"),
            "prev_page_url": obj.get("prev_page_url"),
            "next_page_url": obj.get("next_page_url")
        })
        return _obj


