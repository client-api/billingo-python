# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.14
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt
from clientapi_billingo.models.currency import Currency
from clientapi_billingo.models.discount import Discount
from clientapi_billingo.models.document_form import DocumentForm
from clientapi_billingo.models.document_language import DocumentLanguage
from clientapi_billingo.models.payment_method import PaymentMethod

class PartnerCustomBillingSettings(BaseModel):
    """
    PartnerCustomBillingSettings
    """
    payment_method: Optional[PaymentMethod] = None
    document_form: Optional[DocumentForm] = None
    due_days: Optional[StrictInt] = None
    document_currency: Optional[Currency] = None
    template_language_code: Optional[DocumentLanguage] = None
    discount: Optional[Discount] = None
    __properties = ["payment_method", "document_form", "due_days", "document_currency", "template_language_code", "discount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PartnerCustomBillingSettings:
        """Create an instance of PartnerCustomBillingSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['discount'] = self.discount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PartnerCustomBillingSettings:
        """Create an instance of PartnerCustomBillingSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PartnerCustomBillingSettings.parse_obj(obj)

        _obj = PartnerCustomBillingSettings.parse_obj({
            "payment_method": obj.get("payment_method"),
            "document_form": obj.get("document_form"),
            "due_days": obj.get("due_days"),
            "document_currency": obj.get("document_currency"),
            "template_language_code": obj.get("template_language_code"),
            "discount": Discount.from_dict(obj.get("discount")) if obj.get("discount") is not None else None
        })
        return _obj


