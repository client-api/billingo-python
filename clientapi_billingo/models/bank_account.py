# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.14
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from clientapi_billingo.models.currency import Currency

class BankAccount(BaseModel):
    """
    BankAccount
    """
    id: Optional[StrictInt] = None
    name: StrictStr = Field(...)
    account_number: StrictStr = Field(...)
    account_number_iban: Optional[StrictStr] = None
    swift: Optional[StrictStr] = None
    currency: Currency = Field(...)
    need_qr: Optional[StrictBool] = False
    __properties = ["id", "name", "account_number", "account_number_iban", "swift", "currency", "need_qr"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BankAccount:
        """Create an instance of BankAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BankAccount:
        """Create an instance of BankAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BankAccount.parse_obj(obj)

        _obj = BankAccount.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "account_number": obj.get("account_number"),
            "account_number_iban": obj.get("account_number_iban"),
            "swift": obj.get("swift"),
            "currency": obj.get("currency"),
            "need_qr": obj.get("need_qr") if obj.get("need_qr") is not None else False
        })
        return _obj


