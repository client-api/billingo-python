# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.14
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from clientapi_billingo.models.document_type import DocumentType
from clientapi_billingo.models.online_payment import OnlinePayment
from clientapi_billingo.models.round import Round

class DocumentSettings(BaseModel):
    """
    DocumentSettings
    """
    mediated_service: Optional[StrictBool] = False
    without_financial_fulfillment: Optional[StrictBool] = False
    online_payment: Optional[OnlinePayment] = None
    round: Optional[Round] = None
    no_send_onlineszamla_by_user: Optional[StrictBool] = None
    order_number: Optional[StrictStr] = None
    place_id: Optional[StrictInt] = None
    instant_payment: Optional[StrictBool] = None
    selected_type: Optional[DocumentType] = None
    __properties = ["mediated_service", "without_financial_fulfillment", "online_payment", "round", "no_send_onlineszamla_by_user", "order_number", "place_id", "instant_payment", "selected_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DocumentSettings:
        """Create an instance of DocumentSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if place_id (nullable) is None
        # and __fields_set__ contains the field
        if self.place_id is None and "place_id" in self.__fields_set__:
            _dict['place_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DocumentSettings:
        """Create an instance of DocumentSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DocumentSettings.parse_obj(obj)

        _obj = DocumentSettings.parse_obj({
            "mediated_service": obj.get("mediated_service") if obj.get("mediated_service") is not None else False,
            "without_financial_fulfillment": obj.get("without_financial_fulfillment") if obj.get("without_financial_fulfillment") is not None else False,
            "online_payment": obj.get("online_payment"),
            "round": obj.get("round"),
            "no_send_onlineszamla_by_user": obj.get("no_send_onlineszamla_by_user"),
            "order_number": obj.get("order_number"),
            "place_id": obj.get("place_id"),
            "instant_payment": obj.get("instant_payment"),
            "selected_type": obj.get("selected_type")
        })
        return _obj


