# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.14
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from clientapi_billingo.models.currency import Currency
from clientapi_billingo.models.document_type import DocumentType
from clientapi_billingo.models.payment_method import PaymentMethod
from clientapi_billingo.models.receipt_insert_items_inner import ReceiptInsertItemsInner

class ReceiptInsert(BaseModel):
    """
    ReceiptInsert
    """
    vendor_id: Optional[StrictStr] = None
    partner_id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    emails: Optional[conlist(StrictStr)] = None
    block_id: StrictInt = Field(...)
    type: DocumentType = Field(...)
    payment_method: PaymentMethod = Field(...)
    currency: Currency = Field(...)
    conversion_rate: Optional[Union[StrictFloat, StrictInt]] = None
    electronic: Optional[StrictBool] = False
    items: Optional[conlist(ReceiptInsertItemsInner)] = None
    __properties = ["vendor_id", "partner_id", "name", "emails", "block_id", "type", "payment_method", "currency", "conversion_rate", "electronic", "items"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReceiptInsert:
        """Create an instance of ReceiptInsert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReceiptInsert:
        """Create an instance of ReceiptInsert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReceiptInsert.parse_obj(obj)

        _obj = ReceiptInsert.parse_obj({
            "vendor_id": obj.get("vendor_id"),
            "partner_id": obj.get("partner_id"),
            "name": obj.get("name"),
            "emails": obj.get("emails"),
            "block_id": obj.get("block_id"),
            "type": obj.get("type"),
            "payment_method": obj.get("payment_method"),
            "currency": obj.get("currency"),
            "conversion_rate": obj.get("conversion_rate"),
            "electronic": obj.get("electronic") if obj.get("electronic") is not None else False,
            "items": [ReceiptInsertItemsInner.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None
        })
        return _obj


